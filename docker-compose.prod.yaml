services:
  redis:
    image: redis/redis-stack:latest
    networks:
      - app-network
    restart: always

  web:
    build:
      context: ./backend
    environment:
      FLASK_APP: run
      FLASK_DEBUG: 0
    volumes:
      - ./backend:/app
      - ./backend/project/core/res:/app/project/core/res
    command: flask run -h 0.0.0.0 --with-threads
    env_file:
      - .env.prod
    networks:
      - app-network
    restart: always

  celery:
    build:
        context: ./backend
    environment:
      FLASK_APP: run
    volumes:
      - ./backend:/app
      - ./backend/project/core/res:/app/project/core/res
    command: celery -A run.celery worker --loglevel=info
    depends_on:
      - redis
    env_file:
      - .env.prod
    networks:
    - app-network
    restart: always

  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app
    command: 
      npm run build && npm run start
    env_file:
      - .env.prod
    networks:
      - app-network
    restart: always
  
  nginx:
    image: nginx:alpine
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/certbot:/etc/letsencrypt
    depends_on:
      - web
      - frontend
    networks:
      - app-network
    restart: always
  
  certbot:
    image: certbot/certbot
    volumes:
      - ./nginx/certbot:/etc/letsencrypt  # Persist certs
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done'"
    environment:
      CERTBOT_DOMAIN: archery-tracker.online
      CERTBOT_EMAIL: athicha.pha@ku.th
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge