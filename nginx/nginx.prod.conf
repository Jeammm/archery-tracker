events {}

http {
  client_max_body_size 100M;

  server {
    listen 80;
    server_name archery-tracker.online www.archery-tracker.online;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect HTTP to HTTPS
    return 301 $scheme://www.archery-tracker.online$request_uri;

    # for first run, disable 443 with ssl for certbot to generate cert first
    # location / {
    #   root /usr/share/nginx/html; # This is where the dist files will be mounted
    #   try_files $uri $uri/ /index.html; # Fallback to index.html for SPA routing
    # }
  }

  # redirect http://example.com to https://www.example.com
  server {
    listen 443 ssl;
    server_name archery-tracker.online;

    ssl_certificate /etc/letsencrypt/live/archery-tracker.online/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/archery-tracker.online/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    return 301 $scheme://www.archery-tracker.online$request_uri;
  }

  server {
    listen 443 ssl;
    server_name www.archery-tracker.online;

    ssl_certificate /etc/letsencrypt/live/archery-tracker.online/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/archery-tracker.online/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Serve static files from the dist directory
    location / {
      root /usr/share/nginx/html;
      index index.html index.html;
      include /etc/nginx/mime.types;
      try_files $uri $uri/ /index.html;
    }

    # Proxy backend (Flask)
    location /api/ {
      proxy_pass http://web:5000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /socket.io/ {
      proxy_pass http://web:5000;
      proxy_http_version 1.1;
      proxy_buffering off;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
    }
  }
}